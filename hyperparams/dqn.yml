atari:
  env_wrapper:
    - stable_baselines3.common.atari_wrappers.AtariWrapper
  frame_stack: 4
  policy: 'CnnPolicy'
  n_timesteps: !!float 1e7
  buffer_size: 100000
  learning_rate: !!float 1e-4
  batch_size: 32
  learning_starts: 100000
  target_update_interval: 1000
  train_freq: 4
  gradient_steps: 1
  exploration_fraction: 0.1
  exploration_final_eps: 0.01
  # If True, you need to deactivate handle_timeout_termination
  # in the replay_buffer_kwargs
  optimize_memory_usage: False

# Almost Tuned
CartPole-v1:
  n_timesteps: !!float 5e4
  policy: 'MlpPolicy'
  learning_rate: !!float 2.3e-3
  batch_size: 64
  buffer_size: 100000
  learning_starts: 1000
  gamma: 0.99
  target_update_interval: 10
  train_freq: 256
  gradient_steps: 128
  exploration_fraction: 0.16
  exploration_final_eps: 0.04
  policy_kwargs: "dict(net_arch=[256, 256])"

# Not Tuned
PandaReachDenseDiscrete-v3:
  n_timesteps: !!float 1e5
  policy: 'MultiInputPolicy'
  learning_rate: !!float 0.0011112614647442339
  batch_size: 64
  buffer_size: 50000
  learning_starts: 1000
  gamma: 0.99
  target_update_interval: 5000
  train_freq: 8
  gradient_steps: 100
  exploration_fraction: 0.17492366254590996
  exploration_final_eps: 0.1392381728504725
  policy_kwargs: "dict(net_arch=[256, 256])"

# Not Tuned
PandaReachDenseDiscrete-v4:
  n_timesteps: !!float 1e5
  policy: 'MultiInputPolicy'
  learning_rate: !!float 7.643876040633155e-05
  batch_size: 64
  buffer_size: 10000
  learning_starts: 5000
  gamma: 0.95
  target_update_interval: 5000
  train_freq: 64
  gradient_steps: 100
  exploration_fraction: 0.058706276382235315
  exploration_final_eps: 0.1392381728504725
  policy_kwargs: "dict(net_arch=[64, 64])"

PandaGraspDenseDiscrete-v3:
  n_timesteps: !!float 1e5
  policy: 'MultiInputPolicy'
  learning_rate: !!float 0.00013500596594616732
  batch_size: 64
  buffer_size: 50000
  learning_starts: 1000
  gamma: 0.95
  target_update_interval: 5000
  train_freq: 256
  gradient_steps: 100
  exploration_fraction: 0.17492366254590996
  exploration_final_eps: 0.1392381728504725
  policy_kwargs: "dict(net_arch=[256, 256])"
  replay_buffer_class: HerReplayBuffer
  replay_buffer_kwargs: "dict(
    online_sampling=True,
    goal_selection_strategy='future',
    n_sampled_goal=4
  )"

PandaPickAndPlaceDenseDiscrete-v3:
  n_timesteps: !!float 1e5
  policy: 'MultiInputPolicy'
  learning_rate: !!float 0.00013500596594616732
  batch_size: 64
  buffer_size: 50000
  learning_starts: 1000
  gamma: 0.95
  target_update_interval: 5000
  train_freq: 256
  gradient_steps: 100
  exploration_fraction: 0.17492366254590996
  exploration_final_eps: 0.1392381728504725
  policy_kwargs: "dict(net_arch=[256, 256])"

PandaPickAndPlaceDiscrete-v3:
  n_timesteps: !!float 1e5
  policy: 'MultiInputPolicy'
  learning_rate: !!float 0.00013500596594616732
  batch_size: 64
  buffer_size: 50000
  learning_starts: 1000
  gamma: 0.95
  target_update_interval: 5000
  train_freq: 256
  gradient_steps: 100
  exploration_fraction: 0.17492366254590996
  exploration_final_eps: 0.1392381728504725
  policy_kwargs: "dict(net_arch=[256, 256])"

# Tuned
MountainCar-v0:
  n_timesteps: !!float 1.2e5
  policy: 'MlpPolicy'
  learning_rate: !!float 4e-3
  batch_size: 128
  buffer_size: 10000
  learning_starts: 1000
  gamma: 0.98
  target_update_interval: 600
  train_freq: 16
  gradient_steps: 8
  exploration_fraction: 0.2
  exploration_final_eps: 0.07
  policy_kwargs: "dict(net_arch=[256, 256])"

# Tuned
LunarLander-v2:
  n_timesteps: !!float 1e5
  policy: 'MlpPolicy'
  learning_rate: !!float 6.3e-4
  batch_size: 128
  buffer_size: 50000
  learning_starts: 0
  gamma: 0.99
  target_update_interval: 250
  train_freq: 4
  gradient_steps: -1
  exploration_fraction: 0.12
  exploration_final_eps: 0.1
  policy_kwargs: "dict(net_arch=[256, 256])"

# Tuned
Acrobot-v1:
  n_timesteps: !!float 1e5
  policy: 'MlpPolicy'
  learning_rate: !!float 6.3e-4
  batch_size: 128
  buffer_size: 50000
  learning_starts: 0
  gamma: 0.99
  target_update_interval: 250
  train_freq: 4
  gradient_steps: -1
  exploration_fraction: 0.12
  exploration_final_eps: 0.1
  policy_kwargs: "dict(net_arch=[256, 256])"
